<!-- livebook:{"app_settings":{"slug":"ldq-with-docker"}} -->

# Documentation dynamique

## Introduction

Démarrer l'application avec un nom précis (dans le dossier de l'application) en copiant-collant le code ci-dessous (on ne peut pas l'évaluer).

`iex -name ldq@localhost --cookie secret -S mix phx.server`

Ou en mode test :

`MIV_ENV=test iex -name ldq@localhost --cookie secret -S mix phx.server`

Une fois l'application lancée, tu peux ouvrir l'onglet `Runtime settings` ci-contre à gauche, configurer le "Node name" si nécessaire (en mettant "ldq@localhost") et si la connexion se fait bien, sur peux utiliser les fonctions ci-dessous.

## Présentation de l'application

Cette application doit permettre de gérer entièrement le label "Lecture de Qualité" qui doit révolutionner, en quelques années, le monde de l'autoédition.

Cette révolution se fera en offrant une sélection des ouvrages à lire en toute confiance par les lectrices et lecteurs de tous bords.

## Essai fonctions

Pour savoir si on est ou non en version développement ou test.

```elixir
IO.puts ["Environnement développement ? ", inspect LdQ.Constantes.env_dev?()]
IO.puts ["Environnement test ? ", inspect LdQ.Constantes.env_test?()]
```

On essaie d'avoir la liste des utilisateurs actuels

```elixir
LdQ.Comptes.get_users([])
```

Pour obtenir les données d'un utilisateur quelconque. Noter les propriétés volatiles qui sont ajoutées, par exemple `:refs` et `:linked_refs`.

```elixir
user_id = if LdQ.Constantes.env_dev?() do
  # En mode développement, on me prend moi
  "abd16275-11c0-4a03-a010-23b11a32873e"
else
  # En mode test, on prend le premier user
  LdQ.Comptes.get_users([]) |> Enum.at(0) |> Map.get(:id)
end |> IO.inspect(label: "USER ID")
LdQ.Comptes.get_user!(user_id)
```

<!-- livebook:{"offset":1792,"stamp":{"token":"XCP.AH5DyuFbQnLDoXXLAxNuGiUraIlFQw453GaWnIetc6IBypSoKc1qdyJxK0SMgKAXFwUqPak4N2chHv3oQfbAfR5nGevQ0T7lShcG_GcSt5qJRPe2br78Lz7eweH7VVyKGsSkisDTgNCQv2M0H060B9vOeVmzS0C14czsSjGO8xV0","version":2}} -->
